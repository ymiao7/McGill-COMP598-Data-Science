# -*- coding: utf-8 -*-
"""Comp 598 hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NgHH9PeJsg0Xe2hS7IXsbO520ybjSjB2

## 1. Data Collection
"""

import nltk
nltk.download("popular")
from nltk.tokenize import RegexpTokenizer

import pandas as pd
import string
import re

df = pd.read_csv('IRAhandle_tweets_1.csv',nrows=10000)
df.head()

idx_list = []
for idx, row in df[['language','content']].iterrows():

  # check if this tweet is english and if it's a question
  if row.language != 'English' or '?' in row.content:
    continue
  else:
    idx_list.append(idx)

len(idx_list)

df_filtered = df.iloc[idx_list]

df_filtered.head()

df_filtered.to_csv('dataset.tsv', sep = '\t', index=False)

"""## 2. Data Annotation"""

def find_trump(row):
  # check if the the word Trump exists in the content
  # if 'T[Rr][Uu][Mm][Pp]' in row['content']:
  if re.search(r"T[Rr][Uu][Mm][Pp]", row['content']) is not None:

    # define a tokenizer that picks out sequences of 
    # alphanumeric characters as tokens and drops everything else
    tokenizer = RegexpTokenizer(r'\w+')
    string_list = tokenizer.tokenize(row['content'])

    # iterate through all the tokens
    # return 'T' if there exists one that matches exactly the word Trump
    # return 'F' otherwise
    for word in string_list:
      # if word == 'Trump':
      if re.match(r"T[Rr][Uu][Mm][Pp]",word) is not None:
        return 'T'
    return 'F'
  else:
    # also return 'F' if the word Trump doesn't exist in the content
    return 'F'

new_col = df_filtered.apply (lambda row: find_trump(row), axis=1).values # apply function 'find_trump' to each row

df_filtered1 = df_filtered.assign(trump_mention=new_col)

df_filtered1.head()

output_df = df_filtered1[['tweet_id','publish_date','content','trump_mention']]

output_df.head()

output_df.to_csv('dataset.tsv', sep = '\t', index=False)

"""## 3. Analysis"""

frac = df_filtered1['trump_mention'].value_counts(normalize=True) # calculate the fraction

results_dict = [{'result':'frac-trump-mentions', 'value':'%.3f'%(frac['T'])}]

results = pd.DataFrame(results_dict)

results

results.to_csv('results.tsv', sep = '\t', index=False)